#!/usr/bin/env perl

# Assume svn externals are manually maintained with "git svn clone".
#
# Check each svn external in the current directory's svn:externals.
# For each external in the current directory's "svn:externals", compare
# the external's svn revision to the currently checked out svn revision,
# and complain if there are any differences.

use strict;
use warnings;
use Cwd;

my $revision;
foreach (qx(git svn info)) {
    $revision = $1 if /^Revision: (.*)/;
}
die "Unable to determine the SVN revision." if !defined $revision;

sub get_external_tag {
    my ($url, $dir) = @_;
    # TODO: extract patterns from svn-remote.svn.{fetch,branches,tags}
    my ($branch) = m!branches/([^/]+)/!;
    my ($tag) = m!(tags/[^/]+)!;
    my ($trunk) = m!/(trunk)/!;
    if (defined $tag || defined $branch || defined $trunk) {
        return $tag || $branch || $trunk;
    }
    die "unable to get tag/branch/trunk from $url";
}

my @externals = qx(git svn -r$revision propget svn:externals);
foreach (@externals) {
    if (my ($url, $dir) = /(\S+)\s+(\S+)/) {
        my $cwd = getcwd();
        chdir $dir;

        my $current_rev = qx(git svn find-rev HEAD);
        chomp $current_rev;

        my $external_tag = get_external_tag($url, $dir);

        my $external_rev = qx(git svn find-rev $external_tag);
        chomp $external_rev;

        print "$dir: $external_tag ($external_rev)\n";

        if ($external_rev ne $current_rev) {
            print "Mismatch for $dir\n";
            print "\tcurrent rev:  $current_rev\n";
            print "\texternal rev: $external_rev\n";
            print "\texternal tag: $external_tag\n";
        }
        chdir $cwd;
    }
}

